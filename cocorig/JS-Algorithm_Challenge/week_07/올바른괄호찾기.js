

// 내 풀이

// 접근방식 : s의 길이만큼 반복하면서 열기괄호면 스택 배열에 push하고, 닫기괄호면 배열에서 pop해준다. 
// 반복이 끝이나면 스택배열의 원소가 남아있다면 올바르지않은 괄호이고, 없다면 다 짝을 맞춘거니까 스택 배열이 비어있을것이다. 그러면 올바른 괄호라고 판단했다.

function solution(s) {

  // 맨 앞의 문자가 닫기괄호일 경우 바로 false반환
  if(s[0] === ')'){
    return false;
  }
  let steck = [];
  for(let i = 0; i < s.length; i++) {
    if(s[i] === '('){
      steck.push(s[i]);
    }else{
      //')' 닫기괄호인데  steck안의 원소가 없을 경우는 올바르지않은 괄호이기때문에 바로 false 반환
      if(steck.length === 0){
        return false;
      }
      steck.pop();
    }
  }
  return steck.length === 0; // 0이면 true , 아니면 false를 바로 반환하게
}
console.log(solution("())(("));

// // 정확성  테스트
// 테스트 1 〉	통과 (0.04ms, 33.5MB)
// 테스트 2 〉	통과 (0.06ms, 33.6MB)
// 테스트 3 〉	통과 (0.05ms, 33.5MB)
// 테스트 4 〉	통과 (0.04ms, 33.6MB)
// 테스트 5 〉	통과 (0.05ms, 33.5MB)
// 테스트 6 〉	통과 (0.05ms, 33.5MB)
// 테스트 7 〉	통과 (0.05ms, 33.6MB)
// 테스트 8 〉	통과 (0.05ms, 33.5MB)
// 테스트 9 〉	통과 (0.19ms, 33.5MB)
// 테스트 10 〉	통과 (0.08ms, 33.5MB)
// 테스트 11 〉	통과 (0.06ms, 33.5MB)
// 테스트 12 〉	통과 (0.19ms, 33.5MB)
// 테스트 13 〉	통과 (0.13ms, 33.5MB)
// 테스트 14 〉	통과 (0.15ms, 33.5MB)
// 테스트 15 〉	통과 (0.15ms, 33.6MB)
// 테스트 16 〉	통과 (0.17ms, 33.5MB)
// 테스트 17 〉	통과 (0.13ms, 33.4MB)
// 테스트 18 〉	통과 (0.15ms, 33.5MB)
// 효율성  테스트
// 테스트 1 〉	통과 (4.95ms, 37.6MB)
// 테스트 2 〉	통과 (5.69ms, 37.6MB)




// 다른 사람 풀이(조금 더 빠름)
// 풀이 해석 : 스택 구조의 push()를 +1로 pop()을 -1로 표현해 배열을 만들지 않고, sum 변수에 연산을 해준거 같다.
function solution(s){
  let sum = 0;
  // 이 부분은 똑같이 예외처리
  if(s[0] === ')')
    return false;

  for(let i = 0; i < s.length; i++){
      // 열기괄호면 sum에 1을 더하고 , 닫기괄호면 1을 빼준다.
      s[i] === '(' ? sum += 1 : sum -= 1
      // 끝에 닫기괄호가 남아있는 경우 sum이 -가 되니까 false 반환한다.
      if(sum < 0)
          return false;
  }
  // 똑같이 sum이 0이면 괄호 짝을 맞춘거니까 true를 반환해준다,
  return sum === 0 ? true : false;
}
//정확성  테스트
// 테스트 1 〉	통과 (0.04ms, 33.4MB)
// 테스트 2 〉	통과 (0.04ms, 33.4MB)
// 테스트 3 〉	통과 (0.04ms, 33.4MB)
// 테스트 4 〉	통과 (0.04ms, 33.4MB)
// 테스트 5 〉	통과 (0.04ms, 33.4MB)
// 테스트 6 〉	통과 (0.04ms, 33.4MB)
// 테스트 7 〉	통과 (0.04ms, 33.4MB)
// 테스트 8 〉	통과 (0.04ms, 33.3MB)
// 테스트 9 〉	통과 (0.11ms, 33.3MB)
// 테스트 10 〉	통과 (0.04ms, 33.4MB)
// 테스트 11 〉	통과 (0.04ms, 33.4MB)
// 테스트 12 〉	통과 (0.12ms, 33.4MB)
// 테스트 13 〉	통과 (0.12ms, 33.4MB)
// 테스트 14 〉	통과 (0.12ms, 33.5MB)
// 테스트 15 〉	통과 (0.12ms, 33.4MB)
// 테스트 16 〉	통과 (0.12ms, 33.4MB)
// 테스트 17 〉	통과 (0.12ms, 33.4MB)
// 테스트 18 〉	통과 (0.11ms, 33.5MB)
// 효율성  테스트
// 테스트 1 〉	통과 (2.51ms, 36.9MB)
// 테스트 2 〉	통과 (2.45ms, 37MB)
